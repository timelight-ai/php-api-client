<?php
/**
 * PrevisionApi
 * PHP version 5
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * timelight
 *
 * This is the timelight api.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TimelightAi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TimelightAi\ApiException;
use TimelightAi\Configuration;
use TimelightAi\HeaderSelector;
use TimelightAi\ObjectSerializer;

/**
 * PrevisionApi Class Doc Comment
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrevisionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1PrevisionGroupApplyPrevisionPost
     *
     * Apply a source prevision to the whole group
     *
     * @param  \TimelightAi\Model\PrevisionApplyGroupDto $prevision_apply_group_dto prevision_apply_group_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TimelightAi\Model\PrevisionApplyGroupResponseDto
     */
    public function v1PrevisionGroupApplyPrevisionPost($prevision_apply_group_dto)
    {
        list($response) = $this->v1PrevisionGroupApplyPrevisionPostWithHttpInfo($prevision_apply_group_dto);
        return $response;
    }

    /**
     * Operation v1PrevisionGroupApplyPrevisionPostWithHttpInfo
     *
     * Apply a source prevision to the whole group
     *
     * @param  \TimelightAi\Model\PrevisionApplyGroupDto $prevision_apply_group_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TimelightAi\Model\PrevisionApplyGroupResponseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrevisionGroupApplyPrevisionPostWithHttpInfo($prevision_apply_group_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionApplyGroupResponseDto';
        $request = $this->v1PrevisionGroupApplyPrevisionPostRequest($prevision_apply_group_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TimelightAi\Model\PrevisionApplyGroupResponseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrevisionGroupApplyPrevisionPostAsync
     *
     * Apply a source prevision to the whole group
     *
     * @param  \TimelightAi\Model\PrevisionApplyGroupDto $prevision_apply_group_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionGroupApplyPrevisionPostAsync($prevision_apply_group_dto)
    {
        return $this->v1PrevisionGroupApplyPrevisionPostAsyncWithHttpInfo($prevision_apply_group_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrevisionGroupApplyPrevisionPostAsyncWithHttpInfo
     *
     * Apply a source prevision to the whole group
     *
     * @param  \TimelightAi\Model\PrevisionApplyGroupDto $prevision_apply_group_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionGroupApplyPrevisionPostAsyncWithHttpInfo($prevision_apply_group_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionApplyGroupResponseDto';
        $request = $this->v1PrevisionGroupApplyPrevisionPostRequest($prevision_apply_group_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrevisionGroupApplyPrevisionPost'
     *
     * @param  \TimelightAi\Model\PrevisionApplyGroupDto $prevision_apply_group_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrevisionGroupApplyPrevisionPostRequest($prevision_apply_group_dto)
    {
        // verify the required parameter 'prevision_apply_group_dto' is set
        if ($prevision_apply_group_dto === null || (is_array($prevision_apply_group_dto) && count($prevision_apply_group_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prevision_apply_group_dto when calling v1PrevisionGroupApplyPrevisionPost'
            );
        }

        $resourcePath = '/v1/prevision/group-apply-prevision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prevision_apply_group_dto)) {
            $_tempBody = $prevision_apply_group_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrevisionListSourceIdYearGet
     *
     * Fetch data previsions for a given year
     *
     * @param  float $year year (required)
     * @param  float $source_id source_id (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TimelightAi\Model\PrevisionListDto
     */
    public function v1PrevisionListSourceIdYearGet($year, $source_id)
    {
        list($response) = $this->v1PrevisionListSourceIdYearGetWithHttpInfo($year, $source_id);
        return $response;
    }

    /**
     * Operation v1PrevisionListSourceIdYearGetWithHttpInfo
     *
     * Fetch data previsions for a given year
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TimelightAi\Model\PrevisionListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrevisionListSourceIdYearGetWithHttpInfo($year, $source_id)
    {
        $returnType = '\TimelightAi\Model\PrevisionListDto';
        $request = $this->v1PrevisionListSourceIdYearGetRequest($year, $source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TimelightAi\Model\PrevisionListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrevisionListSourceIdYearGetAsync
     *
     * Fetch data previsions for a given year
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionListSourceIdYearGetAsync($year, $source_id)
    {
        return $this->v1PrevisionListSourceIdYearGetAsyncWithHttpInfo($year, $source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrevisionListSourceIdYearGetAsyncWithHttpInfo
     *
     * Fetch data previsions for a given year
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionListSourceIdYearGetAsyncWithHttpInfo($year, $source_id)
    {
        $returnType = '\TimelightAi\Model\PrevisionListDto';
        $request = $this->v1PrevisionListSourceIdYearGetRequest($year, $source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrevisionListSourceIdYearGet'
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrevisionListSourceIdYearGetRequest($year, $source_id)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling v1PrevisionListSourceIdYearGet'
            );
        }
        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling v1PrevisionListSourceIdYearGet'
            );
        }

        $resourcePath = '/v1/prevision/list/{sourceId}/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrevisionSaveDefaultPrevisionsSourceIdYearPost
     *
     * Generate default previsions for the source and save them
     *
     * @param  float $year year (required)
     * @param  float $source_id source_id (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TimelightAi\Model\PrevisionBulkSaveResultDto
     */
    public function v1PrevisionSaveDefaultPrevisionsSourceIdYearPost($year, $source_id)
    {
        list($response) = $this->v1PrevisionSaveDefaultPrevisionsSourceIdYearPostWithHttpInfo($year, $source_id);
        return $response;
    }

    /**
     * Operation v1PrevisionSaveDefaultPrevisionsSourceIdYearPostWithHttpInfo
     *
     * Generate default previsions for the source and save them
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TimelightAi\Model\PrevisionBulkSaveResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrevisionSaveDefaultPrevisionsSourceIdYearPostWithHttpInfo($year, $source_id)
    {
        $returnType = '\TimelightAi\Model\PrevisionBulkSaveResultDto';
        $request = $this->v1PrevisionSaveDefaultPrevisionsSourceIdYearPostRequest($year, $source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TimelightAi\Model\PrevisionBulkSaveResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrevisionSaveDefaultPrevisionsSourceIdYearPostAsync
     *
     * Generate default previsions for the source and save them
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionSaveDefaultPrevisionsSourceIdYearPostAsync($year, $source_id)
    {
        return $this->v1PrevisionSaveDefaultPrevisionsSourceIdYearPostAsyncWithHttpInfo($year, $source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrevisionSaveDefaultPrevisionsSourceIdYearPostAsyncWithHttpInfo
     *
     * Generate default previsions for the source and save them
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionSaveDefaultPrevisionsSourceIdYearPostAsyncWithHttpInfo($year, $source_id)
    {
        $returnType = '\TimelightAi\Model\PrevisionBulkSaveResultDto';
        $request = $this->v1PrevisionSaveDefaultPrevisionsSourceIdYearPostRequest($year, $source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrevisionSaveDefaultPrevisionsSourceIdYearPost'
     *
     * @param  float $year (required)
     * @param  float $source_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrevisionSaveDefaultPrevisionsSourceIdYearPostRequest($year, $source_id)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling v1PrevisionSaveDefaultPrevisionsSourceIdYearPost'
            );
        }
        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling v1PrevisionSaveDefaultPrevisionsSourceIdYearPost'
            );
        }

        $resourcePath = '/v1/prevision/save-default-previsions/{sourceId}/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrevisionSavePost
     *
     * Save many previsions at once
     *
     * @param  \TimelightAi\Model\PrevisionBulkSaveDto $prevision_bulk_save_dto prevision_bulk_save_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TimelightAi\Model\PrevisionBulkSaveResultDto
     */
    public function v1PrevisionSavePost($prevision_bulk_save_dto)
    {
        list($response) = $this->v1PrevisionSavePostWithHttpInfo($prevision_bulk_save_dto);
        return $response;
    }

    /**
     * Operation v1PrevisionSavePostWithHttpInfo
     *
     * Save many previsions at once
     *
     * @param  \TimelightAi\Model\PrevisionBulkSaveDto $prevision_bulk_save_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TimelightAi\Model\PrevisionBulkSaveResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrevisionSavePostWithHttpInfo($prevision_bulk_save_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionBulkSaveResultDto';
        $request = $this->v1PrevisionSavePostRequest($prevision_bulk_save_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TimelightAi\Model\PrevisionBulkSaveResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrevisionSavePostAsync
     *
     * Save many previsions at once
     *
     * @param  \TimelightAi\Model\PrevisionBulkSaveDto $prevision_bulk_save_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionSavePostAsync($prevision_bulk_save_dto)
    {
        return $this->v1PrevisionSavePostAsyncWithHttpInfo($prevision_bulk_save_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrevisionSavePostAsyncWithHttpInfo
     *
     * Save many previsions at once
     *
     * @param  \TimelightAi\Model\PrevisionBulkSaveDto $prevision_bulk_save_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionSavePostAsyncWithHttpInfo($prevision_bulk_save_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionBulkSaveResultDto';
        $request = $this->v1PrevisionSavePostRequest($prevision_bulk_save_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrevisionSavePost'
     *
     * @param  \TimelightAi\Model\PrevisionBulkSaveDto $prevision_bulk_save_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrevisionSavePostRequest($prevision_bulk_save_dto)
    {
        // verify the required parameter 'prevision_bulk_save_dto' is set
        if ($prevision_bulk_save_dto === null || (is_array($prevision_bulk_save_dto) && count($prevision_bulk_save_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prevision_bulk_save_dto when calling v1PrevisionSavePost'
            );
        }

        $resourcePath = '/v1/prevision/save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prevision_bulk_save_dto)) {
            $_tempBody = $prevision_bulk_save_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PrevisionUpdatePatch
     *
     * Update a specific prevision
     *
     * @param  \TimelightAi\Model\PrevisionPatchDto $prevision_patch_dto prevision_patch_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TimelightAi\Model\PrevisionUpdateResultDto
     */
    public function v1PrevisionUpdatePatch($prevision_patch_dto)
    {
        list($response) = $this->v1PrevisionUpdatePatchWithHttpInfo($prevision_patch_dto);
        return $response;
    }

    /**
     * Operation v1PrevisionUpdatePatchWithHttpInfo
     *
     * Update a specific prevision
     *
     * @param  \TimelightAi\Model\PrevisionPatchDto $prevision_patch_dto (required)
     *
     * @throws \TimelightAi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TimelightAi\Model\PrevisionUpdateResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PrevisionUpdatePatchWithHttpInfo($prevision_patch_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionUpdateResultDto';
        $request = $this->v1PrevisionUpdatePatchRequest($prevision_patch_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TimelightAi\Model\PrevisionUpdateResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PrevisionUpdatePatchAsync
     *
     * Update a specific prevision
     *
     * @param  \TimelightAi\Model\PrevisionPatchDto $prevision_patch_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionUpdatePatchAsync($prevision_patch_dto)
    {
        return $this->v1PrevisionUpdatePatchAsyncWithHttpInfo($prevision_patch_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PrevisionUpdatePatchAsyncWithHttpInfo
     *
     * Update a specific prevision
     *
     * @param  \TimelightAi\Model\PrevisionPatchDto $prevision_patch_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PrevisionUpdatePatchAsyncWithHttpInfo($prevision_patch_dto)
    {
        $returnType = '\TimelightAi\Model\PrevisionUpdateResultDto';
        $request = $this->v1PrevisionUpdatePatchRequest($prevision_patch_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PrevisionUpdatePatch'
     *
     * @param  \TimelightAi\Model\PrevisionPatchDto $prevision_patch_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PrevisionUpdatePatchRequest($prevision_patch_dto)
    {
        // verify the required parameter 'prevision_patch_dto' is set
        if ($prevision_patch_dto === null || (is_array($prevision_patch_dto) && count($prevision_patch_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prevision_patch_dto when calling v1PrevisionUpdatePatch'
            );
        }

        $resourcePath = '/v1/prevision/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prevision_patch_dto)) {
            $_tempBody = $prevision_patch_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
