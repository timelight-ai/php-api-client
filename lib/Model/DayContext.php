<?php
/**
 * DayContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * timelight
 *
 * This is the timelight api.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TimelightAi\Model;

use \ArrayAccess;
use \TimelightAi\ObjectSerializer;

/**
 * DayContext Class Doc Comment
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DayContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DayContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'created_date' => 'string',
        'updated_date' => 'string',
        'day_date' => 'string',
        'source_id' => 'float',
        'ctx_type' => 'string',
        'activity' => 'object',
        'value' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created_date' => null,
        'updated_date' => null,
        'day_date' => null,
        'source_id' => null,
        'ctx_type' => null,
        'activity' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'day_date' => 'dayDate',
        'source_id' => 'sourceId',
        'ctx_type' => 'ctxType',
        'activity' => 'activity',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'day_date' => 'setDayDate',
        'source_id' => 'setSourceId',
        'ctx_type' => 'setCtxType',
        'activity' => 'setActivity',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'day_date' => 'getDayDate',
        'source_id' => 'getSourceId',
        'ctx_type' => 'getCtxType',
        'activity' => 'getActivity',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CTX_TYPE_DJU = 'dju';
    const CTX_TYPE_TEMP_MAX_DEG = 'temp_max_deg';
    const CTX_TYPE_TEMP_MIN_DEG = 'temp_min_deg';
    const CTX_TYPE_WIND_SPEED_KMH = 'wind_speed_kmh';
    const CTX_TYPE_WIND_TEMP_DEG = 'wind_temp_deg';
    const CTX_TYPE_RAIN_MM = 'rain_mm';
    const CTX_TYPE_HUMIDITY_PERC = 'humidity_perc';
    const CTX_TYPE_VISIBILITY_KM = 'visibility_km';
    const CTX_TYPE_CLOUD_COVER_PERC = 'cloud_cover_perc';
    const CTX_TYPE_HEAT_IDX_UNIT = 'heat_idx_unit';
    const CTX_TYPE_DEW_POINT_DEG = 'dew_point_deg';
    const CTX_TYPE_PRESSURE_HPA = 'pressure_hpa';
    const CTX_TYPE_SUNRISE_SEC = 'sunrise_sec';
    const CTX_TYPE_SUNSET_SEC = 'sunset_sec';
    const CTX_TYPE_DAY_LENGTH_SEC = 'day_length_sec';
    const CTX_TYPE_HISTORIQUE_METEO_ENUM = 'historique_meteo_enum';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCtxTypeAllowableValues()
    {
        return [
            self::CTX_TYPE_DJU,
            self::CTX_TYPE_TEMP_MAX_DEG,
            self::CTX_TYPE_TEMP_MIN_DEG,
            self::CTX_TYPE_WIND_SPEED_KMH,
            self::CTX_TYPE_WIND_TEMP_DEG,
            self::CTX_TYPE_RAIN_MM,
            self::CTX_TYPE_HUMIDITY_PERC,
            self::CTX_TYPE_VISIBILITY_KM,
            self::CTX_TYPE_CLOUD_COVER_PERC,
            self::CTX_TYPE_HEAT_IDX_UNIT,
            self::CTX_TYPE_DEW_POINT_DEG,
            self::CTX_TYPE_PRESSURE_HPA,
            self::CTX_TYPE_SUNRISE_SEC,
            self::CTX_TYPE_SUNSET_SEC,
            self::CTX_TYPE_DAY_LENGTH_SEC,
            self::CTX_TYPE_HISTORIQUE_METEO_ENUM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['day_date'] = isset($data['day_date']) ? $data['day_date'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['ctx_type'] = isset($data['ctx_type']) ? $data['ctx_type'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        if ($this->container['updated_date'] === null) {
            $invalidProperties[] = "'updated_date' can't be null";
        }
        if ($this->container['day_date'] === null) {
            $invalidProperties[] = "'day_date' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['ctx_type'] === null) {
            $invalidProperties[] = "'ctx_type' can't be null";
        }
        $allowedValues = $this->getCtxTypeAllowableValues();
        if (!is_null($this->container['ctx_type']) && !in_array($this->container['ctx_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ctx_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['activity'] === null) {
            $invalidProperties[] = "'activity' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return string
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param string $updated_date updated_date
     *
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets day_date
     *
     * @return string
     */
    public function getDayDate()
    {
        return $this->container['day_date'];
    }

    /**
     * Sets day_date
     *
     * @param string $day_date The context date in format \"yyyy-mm-dd\"
     *
     * @return $this
     */
    public function setDayDate($day_date)
    {
        $this->container['day_date'] = $day_date;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return float
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param float $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets ctx_type
     *
     * @return string
     */
    public function getCtxType()
    {
        return $this->container['ctx_type'];
    }

    /**
     * Sets ctx_type
     *
     * @param string $ctx_type Context type
     *
     * @return $this
     */
    public function setCtxType($ctx_type)
    {
        $allowedValues = $this->getCtxTypeAllowableValues();
        if (!in_array($ctx_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ctx_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ctx_type'] = $ctx_type;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return object
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param object $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


