<?php
/**
 * AlertDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * timelight
 *
 * This is the timelight api.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TimelightAi\Model;

use \ArrayAccess;
use \TimelightAi\ObjectSerializer;

/**
 * AlertDto Class Doc Comment
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlertDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlertDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'source_id' => 'float',
        'date' => 'string',
        'criticity' => 'float',
        'shape' => 'bool',
        'activity' => 'string',
        'better_model_id' => 'float',
        'closest_model_id' => 'float',
        'favorite' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'source_id' => null,
        'date' => null,
        'criticity' => null,
        'shape' => null,
        'activity' => null,
        'better_model_id' => null,
        'closest_model_id' => null,
        'favorite' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source_id' => 'source_id',
        'date' => 'date',
        'criticity' => 'criticity',
        'shape' => 'shape',
        'activity' => 'activity',
        'better_model_id' => 'better_model_id',
        'closest_model_id' => 'closest_model_id',
        'favorite' => 'favorite'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source_id' => 'setSourceId',
        'date' => 'setDate',
        'criticity' => 'setCriticity',
        'shape' => 'setShape',
        'activity' => 'setActivity',
        'better_model_id' => 'setBetterModelId',
        'closest_model_id' => 'setClosestModelId',
        'favorite' => 'setFavorite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source_id' => 'getSourceId',
        'date' => 'getDate',
        'criticity' => 'getCriticity',
        'shape' => 'getShape',
        'activity' => 'getActivity',
        'better_model_id' => 'getBetterModelId',
        'closest_model_id' => 'getClosestModelId',
        'favorite' => 'getFavorite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVITY_OVER = 'over';
    const ACTIVITY_UNDER = 'under';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityAllowableValues()
    {
        return [
            self::ACTIVITY_OVER,
            self::ACTIVITY_UNDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['criticity'] = isset($data['criticity']) ? $data['criticity'] : null;
        $this->container['shape'] = isset($data['shape']) ? $data['shape'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['better_model_id'] = isset($data['better_model_id']) ? $data['better_model_id'] : null;
        $this->container['closest_model_id'] = isset($data['closest_model_id']) ? $data['closest_model_id'] : null;
        $this->container['favorite'] = isset($data['favorite']) ? $data['favorite'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['criticity'] === null) {
            $invalidProperties[] = "'criticity' can't be null";
        }
        if ($this->container['shape'] === null) {
            $invalidProperties[] = "'shape' can't be null";
        }
        if ($this->container['activity'] === null) {
            $invalidProperties[] = "'activity' can't be null";
        }
        $allowedValues = $this->getActivityAllowableValues();
        if (!is_null($this->container['activity']) && !in_array($this->container['activity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['better_model_id'] === null) {
            $invalidProperties[] = "'better_model_id' can't be null";
        }
        if ($this->container['closest_model_id'] === null) {
            $invalidProperties[] = "'closest_model_id' can't be null";
        }
        if ($this->container['favorite'] === null) {
            $invalidProperties[] = "'favorite' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return float
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param float $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets criticity
     *
     * @return float
     */
    public function getCriticity()
    {
        return $this->container['criticity'];
    }

    /**
     * Sets criticity
     *
     * @param float $criticity criticity
     *
     * @return $this
     */
    public function setCriticity($criticity)
    {
        $this->container['criticity'] = $criticity;

        return $this;
    }

    /**
     * Gets shape
     *
     * @return bool
     */
    public function getShape()
    {
        return $this->container['shape'];
    }

    /**
     * Sets shape
     *
     * @param bool $shape shape
     *
     * @return $this
     */
    public function setShape($shape)
    {
        $this->container['shape'] = $shape;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return string
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param string $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $allowedValues = $this->getActivityAllowableValues();
        if (!in_array($activity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets better_model_id
     *
     * @return float
     */
    public function getBetterModelId()
    {
        return $this->container['better_model_id'];
    }

    /**
     * Sets better_model_id
     *
     * @param float $better_model_id better_model_id
     *
     * @return $this
     */
    public function setBetterModelId($better_model_id)
    {
        $this->container['better_model_id'] = $better_model_id;

        return $this;
    }

    /**
     * Gets closest_model_id
     *
     * @return float
     */
    public function getClosestModelId()
    {
        return $this->container['closest_model_id'];
    }

    /**
     * Sets closest_model_id
     *
     * @param float $closest_model_id closest_model_id
     *
     * @return $this
     */
    public function setClosestModelId($closest_model_id)
    {
        $this->container['closest_model_id'] = $closest_model_id;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return bool
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param bool $favorite favorite
     *
     * @return $this
     */
    public function setFavorite($favorite)
    {
        $this->container['favorite'] = $favorite;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


