<?php
/**
 * SourcePatchDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * timelight
 *
 * This is the timelight api.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TimelightAi\Model;

use \ArrayAccess;
use \TimelightAi\ObjectSerializer;

/**
 * SourcePatchDto Class Doc Comment
 *
 * @category Class
 * @package  TimelightAi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SourcePatchDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SourcePatchDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'prevision_enabled' => 'bool',
        'latitude' => 'float',
        'longitude' => 'float',
        'address' => 'string',
        'alert_min_criticity' => 'float',
        'alert_max_criticity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'prevision_enabled' => null,
        'latitude' => null,
        'longitude' => null,
        'address' => null,
        'alert_min_criticity' => null,
        'alert_max_criticity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'prevision_enabled' => 'previsionEnabled',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'address' => 'address',
        'alert_min_criticity' => 'alertMinCriticity',
        'alert_max_criticity' => 'alertMaxCriticity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'prevision_enabled' => 'setPrevisionEnabled',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'address' => 'setAddress',
        'alert_min_criticity' => 'setAlertMinCriticity',
        'alert_max_criticity' => 'setAlertMaxCriticity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'prevision_enabled' => 'getPrevisionEnabled',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'address' => 'getAddress',
        'alert_min_criticity' => 'getAlertMinCriticity',
        'alert_max_criticity' => 'getAlertMaxCriticity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['prevision_enabled'] = isset($data['prevision_enabled']) ? $data['prevision_enabled'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['alert_min_criticity'] = isset($data['alert_min_criticity']) ? $data['alert_min_criticity'] : null;
        $this->container['alert_max_criticity'] = isset($data['alert_max_criticity']) ? $data['alert_max_criticity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['prevision_enabled'] === null) {
            $invalidProperties[] = "'prevision_enabled' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['alert_min_criticity'] === null) {
            $invalidProperties[] = "'alert_min_criticity' can't be null";
        }
        if ($this->container['alert_max_criticity'] === null) {
            $invalidProperties[] = "'alert_max_criticity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The source name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prevision_enabled
     *
     * @return bool
     */
    public function getPrevisionEnabled()
    {
        return $this->container['prevision_enabled'];
    }

    /**
     * Sets prevision_enabled
     *
     * @param bool $prevision_enabled The source ability to generate alerts from previsions
     *
     * @return $this
     */
    public function setPrevisionEnabled($prevision_enabled)
    {
        $this->container['prevision_enabled'] = $prevision_enabled;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude The source latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude The source longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The source physical address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets alert_min_criticity
     *
     * @return float
     */
    public function getAlertMinCriticity()
    {
        return $this->container['alert_min_criticity'];
    }

    /**
     * Sets alert_min_criticity
     *
     * @param float $alert_min_criticity The source minimum criticity to trigger an alert
     *
     * @return $this
     */
    public function setAlertMinCriticity($alert_min_criticity)
    {
        $this->container['alert_min_criticity'] = $alert_min_criticity;

        return $this;
    }

    /**
     * Gets alert_max_criticity
     *
     * @return float
     */
    public function getAlertMaxCriticity()
    {
        return $this->container['alert_max_criticity'];
    }

    /**
     * Sets alert_max_criticity
     *
     * @param float $alert_max_criticity The source maximum criticity to trigger an alert
     *
     * @return $this
     */
    public function setAlertMaxCriticity($alert_max_criticity)
    {
        $this->container['alert_max_criticity'] = $alert_max_criticity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


